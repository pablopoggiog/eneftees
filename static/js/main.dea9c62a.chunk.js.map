{"version":3,"sources":["components/Button/index.ts","components/Spinner/styles.ts","components/Spinner/index.tsx","constants/index.ts","assets/honest-work.jpg","styles.ts","App.tsx","hooks/useContract.ts","reportWebVitals.ts","index.tsx"],"names":["Button","styled","button","spin","keyframes","Loader","div","inner","innest","Spinner","CONTRACT_ADDRESS","Container","HeaderContainer","Title","h1","Text","p","Image","img","Link","a","App","useState","currentAccount","setCurrentAccount","isMining","setIsMining","checkIfWalletIsConnected","useCallback","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","networkVersion","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEneftee","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","useContract","src","honestWork","width","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dea9c62a.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  border-radius: 5px;\r\n  background-color: #63b5cf;\r\n  padding: 10px;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: 0.6s;\r\n\r\n  &:hover {\r\n    background-color: #3ca2c3;\r\n    transform: scale(1.01);\r\n  }\r\n`;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst spin = keyframes`\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n  \r\n        50% {\r\n          transform: rotate(180deg);\r\n          opacity: 0.6;\r\n        }\r\n  \r\n        100% {\r\n          transform: rotate(360deg);\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Loader = styled.div<{ inner?: boolean; innest?: boolean }>`\r\n  border: 16px solid lightBlue;\r\n  border-top: 16px solid rgba(255, 219, 220);\r\n  border-radius: 50%;\r\n  width: ${({ inner, innest }) => (inner ? \"67px\" : innest ? \"15px\" : \"120px\")};\r\n  height: ${({ inner, innest }) =>\r\n    inner ? \"67px\" : innest ? \"15px\" : \"120px\"};\r\n  animation: ${spin} 2s linear infinite;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Loader } from \"./styles\";\r\n\r\nexport const Spinner: FunctionComponent = () => (\r\n  <Loader>\r\n    <Loader inner>\r\n      <Loader innest />\r\n    </Loader>\r\n  </Loader>\r\n);\r\n","export const OPENSEA_LINK =\r\n  \"https://testnets.opensea.io/collection/squarenft-jb70rzeywn\";\r\nexport const TOTAL_MINT_COUNT = 50;\r\nexport const CONTRACT_ADDRESS = \"0x86E5064b3C441E446be2A97cec379de3EfF5514c\";\r\n","export default __webpack_public_path__ + \"static/media/honest-work.ad914397.jpg\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 3em;\r\n  background-color: #363537;\r\n  min-height: 100vh;\r\n  padding: 1em;\r\n  box-sizing: border-box;\r\n  text-align: center;\r\n  color: white;\r\n`;\r\n\r\nexport const HeaderContainer = styled.div``;\r\n\r\nexport const Title = styled.h1``;\r\n\r\nexport const Text = styled.p``;\r\n\r\nexport const Image = styled.img`\r\n  border-radius: 5px;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n  color: white;\r\n`;\r\n","import { Button, Spinner } from \"src/components\";\nimport {\n  OPENSEA_LINK,\n  // TOTAL_MINT_COUNT,\n} from \"src/constants\";\nimport honestWork from \"src/assets/honest-work.jpg\";\nimport { useContract } from \"src/hooks/useContract\";\nimport { Container, HeaderContainer, Title, Text, Link, Image } from \"./styles\";\n\nconst App = () => {\n  const { currentAccount, connectWallet, askContractToMintNft, isMining } =\n    useContract();\n\n  return (\n    <Container>\n      <HeaderContainer>\n        <Title>My NFT Collection</Title>\n        <Text>Each unique. Each beautiful. Discover your NFT today.</Text>\n      </HeaderContainer>\n\n      <Image src={honestWork} width=\"300px\" />\n\n      <Button\n        onClick={!currentAccount ? () => connectWallet() : askContractToMintNft}\n      >\n        {!currentAccount ? \"Connect to Wallet\" : \"Mint NFT\"}\n      </Button>\n      {!isMining && <Spinner />}\n      <Link href={OPENSEA_LINK} target=\"_blank\" rel=\"noreferrer\">\n        ðŸŒŠ View Collection on OpenSea\n      </Link>\n    </Container>\n  );\n};\n\nexport default App;\n","import { useEffect, useState, useCallback } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport myEneftee from \"src/utils/MyEneftee.json\";\r\nimport { CONTRACT_ADDRESS } from \"src/constants\";\r\n\r\nexport const useContract = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [isMining, setIsMining] = useState(false);\r\n\r\n  const checkIfWalletIsConnected = useCallback(async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account);\r\n\r\n      // Setup listener! This is for the case where a user comes to our site\r\n      // and ALREADY had their wallet connected + authorized.\r\n      setupEventListener();\r\n    } else {\r\n      console.log(\"No authorized account found\");\r\n    }\r\n  }, []);\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      // Setup listener! This is for the case where a user comes to our site\r\n      // and connected their wallet for the first time.\r\n      setupEventListener();\r\n\r\n      if (window.ethereum.networkVersion !== \"4\")\r\n        alert(\r\n          \"Hey â€” I see you're connected to mainnet but this only works on Rinkeby!\"\r\n        );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Setup our listener.\r\n  const setupEventListener = async () => {\r\n    // Most of this looks the same as our function askContractToMintNft\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        // Same stuff again\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const connectedContract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          myEneftee.abi,\r\n          signer\r\n        );\r\n\r\n        // THIS IS THE MAGIC SAUCE.\r\n        // This will essentially \"capture\" our event when our contract throws it.\r\n        // If you're familiar with webhooks, it's very similar to that!\r\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\r\n          console.log(from, tokenId.toNumber());\r\n          alert(`Hey there!\r\n          \r\n          We've minted your NFT and sent it to your wallet.\r\n          \r\n          It may be blank right now. It can take a max of 10 min to show up on OpenSea.\r\n          \r\n          Here's the link: \r\n          \r\n          https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\r\n        });\r\n\r\n        console.log(\"Setup event listener!\");\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const askContractToMintNft = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const connectedContract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          myEneftee.abi,\r\n          signer\r\n        );\r\n\r\n        console.log(\"Going to pop wallet now to pay gas...\");\r\n        let nftTxn = await connectedContract.makeAnEpicNFT();\r\n\r\n        setIsMining(true);\r\n        console.log(\"Mining...please wait.\");\r\n        await nftTxn.wait();\r\n        console.log(nftTxn);\r\n        console.log(\r\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\r\n        );\r\n        setIsMining(false);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [checkIfWalletIsConnected]);\r\n\r\n  return {\r\n    currentAccount,\r\n    connectWallet,\r\n    askContractToMintNft,\r\n    isMining,\r\n  };\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}